/*
 * Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am3517.dtsi"
/*#include "tps65910.dtsi"*/

/ {
	model = "SST Scepter";
	compatible = "scepter", "ti,am3517-evm", "ti,am3517", "ti,omap3";

	memory {
		device_type = "memory";
		reg = <0x80000000 0x20000000>; /* 512 MB */
	};

	vmmc_fixed: vmmc {
		/*compatible = "regulator-always-on";*/
		compatible = "regulator-fixed";
		regulator-name = "vmmc_fixed";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
	};
	
	
   	leds {
		pinctrl-names = "default";
		pinctrl-0 = <&user_leds>;
		compatible = "gpio-leds";

		led@1 {
			label = "led_blue";
			gpios = <&gpio2 10 GPIO_ACTIVE_HIGH>; /* GPIO 42 */
			default-state = "off";
		};
		led@2 {
			label = "led_red";
			gpios = <&gpio2 11 GPIO_ACTIVE_HIGH>; /* GPIO 43 */
			default-state = "on";
		};
	};
	
	pps {
		compatible = "pps-gpio";
		source-name = "ublox_neo6m";
		source-path = "/dev/ttyS3";
		pinctrl-names = "default";
		pinctrl-0 = <&gps_pins>;
		gpios = <&gpio6 20 GPIO_ACTIVE_HIGH>; /* gpio 180 */
	};

	/* iio-hwmon {
		compatible = "iio-hwmon";
		io-channels = <&adc 0>, <&adc 1>, <&adc 2>,
			<&adc 3>, <&adc 4>, <&adc 5>,
			<&adc 6>, <&adc 7>, <&adc 8>,
			<&adc 9>;
	}; */
	
	clk_audio_fixed: clk_audio_fixed {
		#clock-cells = <0>;
		compatible = "fixed-clock";
		clock-frequency = <12288000>;
	};

	sound {
		status = "okay";
		compatible = "simple-audio-card";
		simple-audio-card,name = "WM8737x2";
		simple-audio-card,widgets = "Line", "Line In";
	      simple-audio-card,routing =
	      	"LINPUT1", "Line In",
			"RINPUT1", "Line In";

		simple-audio-card,dai-link@0 { /* master */
			format = "dsp_b";
			bitclock-master = <&sound_master>;
			frame-master = <&sound_master>;
			cpu {
				sound-dai = <&mcbsp1 0>;
			};
			sound_master: codec {
				sound-dai = <&wm8737master 0>;
				clocks = <&clk_audio_fixed>;
			};
		};
	};
}; /* / */

&am35x_otg_hs {
	status = "okay";
};

&davinci_emac {
	status = "okay";
};

&davinci_mdio {
	status = "okay";
};

/* &mcspi1 {
	adc: mcp3001@0 {
		compatible = "microchip,mcp3001"
		reg = <0x0>;
		#io-channel-cells = <1>;
	}
}; */

&i2c1 {
	clock-frequency = <400000>;
	/*pinctrl-names = "default";
	pintctrl-0 = <&wm5102_i2c_pins_default>;*/
	status = "okay";

	pmu: tps65910@2d {
		compatible = "ti,tps65910";
		reg = <0x2d>;
		interrupt-parent = <&intc>;
		interrupts = < 0 118 0x04 >;

		#gpio-cells = <2>;
		gpio-controller;

		#interrupt-cells = <2>;
		interrupt-controller;

		ti,system-power-controller;

		/*ti,vmbch-threshold = 0;
		ti,vmbch2-threshold = 0;
		ti,en-ck32k-xtal;
		ti,en-gpio-sleep = <0 0 1 0 0 0 0 0 0>;

		vcc1-supply = <&reg_parent>;
		vcc2-supply = <&some_reg>;
		vcc3-supply = <...>;
		vcc4-supply = <...>;
		vcc5-supply = <...>;
		vcc6-supply = <...>;
		vcc7-supply = <...>;
		vccio-supply = <...>;*/

		regulators {
			#address-cells = <1>;
			#size-cells = <0>;

			vdd1_reg: regulator@0 {
				regulator-compatible = "vdd1";
				reg = <0>;
				regulator-min-microvolt = <1200000>;
				regulator-max-microvolt = <1200000>;
				regulator-always-on;
				regulator-boot-on;
				ti,regulator-ext-sleep-control = <0>;
			};
			vdd2_reg: regulator@1 {
				regulator-compatible = "vdd2";
				reg = <1>;
				regulator-min-microvolt = <3300000>;
				regulator-max-microvolt = <3300000>;
				regulator-always-on;
				regulator-boot-on;
				ti,regulator-ext-sleep-control = <4>;
			};
			vddctrl_reg: regulator@2 {
				regulator-compatible = "vddctrl";
				reg = <2>;
				regulator-min-microvolt = < 600000>;
				regulator-max-microvolt = <1400000>;
				regulator-always-on;
				regulator-boot-on;
				ti,regulator-ext-sleep-control = <0>;
			};
			vio_reg: regulator@3 {
				regulator-compatible = "vio";
				reg = <3>;
				regulator-min-microvolt = <1800000>;
				regulator-max-microvolt = <1800000>;
				regulator-always-on;
				regulator-boot-on;
				ti,regulator-ext-sleep-control = <1>;
			};
			ldo1_reg: regulator@4 {
				regulator-compatible = "ldo1";
				reg = <4>;
				regulator-min-microvolt = <1000000>;
				regulator-max-microvolt = <3300000>;
				ti,regulator-ext-sleep-control = <0>;
			};
			ldo2_reg: regulator@5 {
				regulator-compatible = "ldo2";
				reg = <5>;
				regulator-min-microvolt = <1050000>;
				regulator-max-microvolt = <1050000>;
				ti,regulator-ext-sleep-control = <0>;
			};
			ldo3_reg: regulator@6 {
				regulator-compatible = "ldo3";
				reg = <6>;
				regulator-min-microvolt = <1000000>;
				regulator-max-microvolt = <3300000>;
				ti,regulator-ext-sleep-control = <0>;
			};
			ldo4_reg: regulator@7 {
				regulator-compatible = "ldo4";
				reg = <7>;
				regulator-min-microvolt = <1000000>;
				regulator-max-microvolt = <3300000>;
				regulator-always-on;
				ti,regulator-ext-sleep-control = <0>;
			};
			ldo5_reg: regulator@8 {
				regulator-compatible = "ldo5";
				reg = <8>;
				regulator-min-microvolt = <1000000>;
				regulator-max-microvolt = <3300000>;
				ti,regulator-ext-sleep-control = <0>;
			};
			ldo6_reg: regulator@9 {
				regulator-compatible = "ldo6";
				reg = <9>;
				regulator-min-microvolt = <1200000>;
				regulator-max-microvolt = <1200000>;
				ti,regulator-ext-sleep-control = <0>;
			};
			ldo7_reg: regulator@10 {
				regulator-compatible = "ldo7";
				reg = <10>;
				regulator-min-microvolt = <1200000>;
				regulator-max-microvolt = <1200000>;
				regulator-always-on;
				regulator-boot-on;
				ti,regulator-ext-sleep-control = <1>;
			};
			ldo8_reg: regulator@11 {
				regulator-compatible = "ldo8";
				reg = <11>;
				regulator-min-microvolt = <1000000>;
				regulator-max-microvolt = <3300000>;
				regulator-always-on;
				ti,regulator-ext-sleep-control = <1>;
			};
		};
	};
};

&i2c2 {
	status = "okay";
	clock-frequency = <100000>;
	pinctrl-names = "default";
	pinctrl-0 = <&wm8737_pins_default>;
	
	wm8737master: wm8737@1a {
		compatible = "wlf,wm8737";
		reg = <0x1a>;
		status = "okay";
		/* Regulators */
		/* DCVDD-supply = <&vmmc_fixed>;
		DBVDD-supply = <&vmmc_fixed>;
		AVDD-supply = <&vmmc_fixed>;
		MVDD-supply = <&vmmc_fixed>; */
		#sound-dai-cells = <1>;
	};

	wm8737slave: wm8737@1b {
		compatible = "wlf,wm8737";
		reg = <0x1b>;
		status = "okay";
		/* Regulators */
		/* DCVDD-supply = <&vmmc_fixed>;
		DBVDD-supply = <&vmmc_fixed>;
		AVDD-supply = <&vmmc_fixed>;
		MVDD-supply = <&vmmc_fixed>; */
		#sound-dai-cells = <0>;
	};
};

&i2c3 {
	/* This is for the EEPROM, which is no longer populated */
	status = "disabled";
};


/* Master */
&mcbsp1 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&mcbsp1_pins>;
	#sound-dai-cells = <1>;
	/* These are defined incorrectly in omap3.dtsi. See section 13.3.3.1 of the TRM */
	dmas = <&sdma 30>, <&sdma 31>;
	dma-names = "tx", "rx";
};

/* Slave */
&mcbsp2 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&mcbsp2_pins>;
	/* These are defined incorrectly in omap3.dtsi. See section 13.3.3.1 of the TRM */
	dmas = <&sdma 32>, <&sdma 33>;
	dma-names = "tx", "rx";
};

/* PPS */
&mcbsp3 {
	/* We're now using GPIO pps instead of this, so let's disable this */
	status = "disabled";
};

&mmc1 {
	status = "okay";
	vmmc-supply = <&vmmc_fixed>;
	pinctrl-names = "default", "idle";
	pinctrl-0 = <&mmc1_pins_default>;
	pinctrl-1 = <&mmc1_pins_idle>;
	bus-width = <4>;
	ti,non-removable;
	disable-wp;
	/* interrupts-extended = <&intc 64 &gpio2 28 GPIO_ACTIVE_LOW>;*/
	/* interrupts-extended = <&intc 64 &gpio2 28 GPIO_ACTIVE_HIGH>; */
	/* cd-gpios = <&gpio1 6 GPIO_ACTIVE_HIGH>;
	cd-inverted;*/ 
};

&mmc2 {
	status = "okay";
	vmmc-supply = <&vmmc_fixed>;
	pinctrl-names = "default", "idle";
	pinctrl-0 = <&mmc2_pins_default>;
	pinctrl-1 = <&mmc2_pins_idle>;
	bus-width = <4>;
	/*interrupts-extended = <&intc 86 &gpio2 29 GPIO_ACTIVE_HIGH>;
	cd-gpios = <&gpio1 6 GPIO_ACTIVE_HIGH>;
	cd-inverted;*/
};

&aes {
	/* we don't have one of these */
	status = "disabled";
};

&sham {
	/* we don't have one of these */
	status = "disabled";
};

&mmc3 {
	status = "disabled";
};

&uart1 {
	status = "okay";
};

&uart2 {
	status = "okay";
};

&uart3 {
	status = "okay";
}; 

&uart4 {
	status = "okay";
	dma-names = "tx", "rx";
	dmas = <&sdma 55 &sdma 56>; /* dmas in am3517.dtsi is wrong so we fix it here. kick upstream? */
};

/* 
* TI's tools output offsets from 0x48002000. omap3.dtsi uses an offset of 0x48002030.
* Make sure you've adjusted the offsets accordingly.
*/
&omap3_pmx_core {
	pinctrl-names = "default";
	nand_pins: nand_pins {
		pinctrl-single,pins = <
			0x8E ( PIN_OUTPUT | MUX_MODE0 ) /* gpmc_clk, NC*/
			0x5E ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d0, CPU_GPMC_D0*/
			0x60 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d1, CPU_GPMC_D1*/
			0x62 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d2, CPU_GPMC_D2*/
			0x64 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d3, CPU_GPMC_D3*/
			0x66 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d4, CPU_GPMC_D4*/
			0x68 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d5, CPU_GPMC_D5*/
			0x6A ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d6, CPU_GPMC_D6*/
			0x6C ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d7, CPU_GPMC_D7*/
			0x6E ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d8, CPU_GPMC_D8*/
			0x70 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d9, CPU_GPMC_D9*/
			0x72 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d10, CPU_GPMC_D10*/
			0x74 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d11, CPU_GPMC_D11*/
			0x76 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d12, CPU_GPMC_D12*/
			0x78 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d13, CPU_GPMC_D13*/
			0x7A ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d14, CPU_GPMC_D14*/
			0x7C ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_d15, CPU_GPMC_D15*/
			0x90 ( PIN_OUTPUT | MUX_MODE0 ) /* gpmc_nadv_ale, CPU_GPMC_NAVD_ALE*/
			0x96 ( PIN_OUTPUT_PULLUP | MUX_MODE0 ) /* gpmc_nbe0_cle, CPU_GPMC_NBE0_CLE*/
			0x98 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* safe_mode, NC*/
			0x7E ( PIN_OUTPUT_PULLUP | MUX_MODE0 ) /* gpmc_ncs0, CPU_GPMC_NCS0*/
			0x80 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* safe_mode, NC*/
			0x92 ( PIN_OUTPUT | MUX_MODE0 ) /* gpmc_noe, CPU_GPMC_NOE*/
			0x94 ( PIN_OUTPUT | MUX_MODE0 ) /* gpmc_nwe, CPU_GPMC_NWE*/
			0x9A ( PIN_OUTPUT | MUX_MODE0 ) /* gpmc_nwp, CPU_GPMC_NWP*/
			0x9C ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* gpmc_wait0, CPU_GPMC_WAIT0*/
		> ;
	} ;

	mmc1_pins_default: pinmux_mmc1_pins {
		pinctrl-single,pins = <
			0x114 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mmc1_clk, CPU_MMC1_CLK*/
			0x116 ( INPUT_EN | PULL_UP | MUX_MODE0 ) /* mmc1_cmd, CPU_MMC1_CMD*/
			0x118 ( INPUT_EN | PULL_UP | MUX_MODE0 ) /* mmc1_dat0, CPU_MMC1_DAT0*/
			0x11A ( INPUT_EN | PULL_UP | MUX_MODE0 ) /* mmc1_dat1, CPU_MMC1_DAT1*/
			0x11C ( INPUT_EN | PULL_UP | MUX_MODE0 ) /* mmc1_dat2, CPU_MMC1_DAT2*/
			0x11E ( INPUT_EN | PULL_UP | MUX_MODE0 ) /* mmc1_dat3, CPU_MMC1_DAT3*/
			0x1BE ( PIN_INPUT_PULLUP | MUX_MODE4 ) /* gpio_99, SD_CARD1_DET*/
		> ;
	} ; 

	mmc1_pins_idle: pinmux_mmc1_pins_idle {
		pinctrl-single,pins = <
			0x11A ( INPUT_EN | PULL_UP | MUX_MODE0 ) /* mmc1_dat1, CPU_MMC1_DAT1*/
		> ;
	};

	mmc1_pins_sleep: pinmux_mmc1_pins_sleep {
		pinctrl-single,pins = <
			0x114 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mmc1_clk, CPU_MMC1_CLK*/
			0x116 ( INPUT_EN | PULL_UP | MUX_MODE0 ) /* mmc1_cmd, CPU_MMC1_CMD*/
			0x118 ( INPUT_EN | PULL_UP | MUX_MODE0 ) /* mmc1_dat0, CPU_MMC1_DAT0*/
			0x11A ( INPUT_EN | PULL_UP | MUX_MODE0 ) /* mmc1_dat1, CPU_MMC1_DAT1*/
			0x11C ( INPUT_EN | PULL_UP | MUX_MODE0 ) /* mmc1_dat2, CPU_MMC1_DAT2*/
			0x11E ( INPUT_EN | PULL_UP | MUX_MODE0 ) /* mmc1_dat3, CPU_MMC1_DAT3*/
			0x1BE ( PIN_INPUT_PULLUP | MUX_MODE4 ) /* gpio_99, SD_CARD1_DET*/
		> ;
	} ;

	mmc2_pins_default: pinmux_mmc2_pins_default {
		pinctrl-single,pins = <
			0x126 ( PIN_INPUT_PULLDOWN | MUX_MODE4 ) /* gpio_129, INTR_CARD_DET*/
			0x128 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mmc2_clk, CPU_MMC2_CLK*/
			0x12A ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mmc2_cmd, CPU_MMC2_CMD*/
			0x12C ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mmc2_dat0, CPU_MMC2_DAT0*/
			0x12E ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mmc2_dat1, CPU_MMC2_DAT1*/
			0x130 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mmc2_dat2, CPU_MMC2_DAT2*/
			0x132 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mmc2_dat3, CPU_MMC2_DAT3*/
			0x134 ( PIN_INPUT_PULLDOWN | MUX_MODE1 ) /* HY-DBG: MMC2_DIR_DAT0 gpio_136, BD_REV2*/
			0x136 ( PIN_INPUT_PULLDOWN | MUX_MODE1 ) /* HY-DBG: MMC2_DIR_DAT1 gpio_137, BD_REV3*/
			0x13A ( PIN_INPUT_PULLUP | MUX_MODE1 ) /* mmc2_clkin, MMC2_CLKIN*/
			/*	 0x138 ( PIN_INPUT_PULLUP | MUX_MODE1 ) /* HY-DBG: MMC2_DIR_CMD gpio_138, SD_CARD2_DET*/
			/*	 0x140 ( PIN_INPUT | MUX_MODE0 ) /* mcbsp3_clkx, ADC_BCLK1*/
		> ;
	} ;

	mmc2_pins_idle: pinmux_mmc2_pins_idle {
		pinctrl-single,pins = <
			0x12E ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mmc2_dat1, CPU_MMC2_DAT1*/
		> ;
	};

	mmc2_pins_sleep: pinmux_mmc2_pins_sleep {
		pinctrl-single,pins = <
			0x126 ( PIN_INPUT_PULLDOWN | MUX_MODE4 ) /* gpio_129, INTR_CARD_DET*/
			0x128 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mmc2_clk, CPU_MMC2_CLK*/
			0x12A ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mmc2_cmd, CPU_MMC2_CMD*/
			0x12C ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mmc2_dat0, CPU_MMC2_DAT0*/
			0x12E ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mmc2_dat1, CPU_MMC2_DAT1*/
			0x130 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mmc2_dat2, CPU_MMC2_DAT2*/
			0x132 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mmc2_dat3, CPU_MMC2_DAT3*/
			0x134 ( PIN_INPUT_PULLDOWN | MUX_MODE1 ) /* HY-DBG: MMC2_DIR_DAT0 gpio_136, BD_REV2*/
			0x136 ( PIN_INPUT_PULLDOWN | MUX_MODE1 ) /* HY-DBG: MMC2_DIR_DAT1 gpio_137, BD_REV3*/
			0x13A ( PIN_INPUT_PULLUP | MUX_MODE1 ) /* mmc2_clkin, MMC2_CLKIN*/
		> ;
	} ;

	/* wm8737 control */
	wm8737_pins_default: wm8737_pins_default {
		pinctrl-single,pins = <
			0x18E ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* i2c2_scl, CPU_I2C2_SCL*/
			0x190 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* i2c2_sda, CPU_I2C2_SDA*/
			0x1CC ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_106, CPU_ENABLE_ADC_CLK*/
		>;
	};

	/* Master ADC0 */
	mcbsp1_pins: pinmux_mcbsp1_pins {
		pinctrl-single,pins = <
			0x15C ( PIN_INPUT | MUX_MODE0 ) /* mcbsp1_clkr, ADC_BCLK_1*/
			0x15E ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* mcbsp1_fsr, FRAME_SYNC*/
			0x142 ( PIN_INPUT | MUX_MODE0 ) /* mcbsp3_fsx, FRAME_SYNC*/
			0x1AC ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* gpt11_pwm_evt, FRAME_SYNC_8192*/
			0x162 ( PIN_INPUT | MUX_MODE0 ) /* mcbsp1_dr, ADCDAT_L*/
			0x164 ( PIN_INPUT | MUX_MODE0 ) /* mcbsp_clks, ADC_MCLK*/
		>;
	};

	/* Slave ADC1 */
	mcbsp2_pins: pinmux_mcbsp2_pins {
		pinctrl-single,pins = <
			0x10C ( PIN_INPUT | MUX_MODE0 ) /* mcbsp2_fsx, FRAME_SYNC*/
			0x10E ( PIN_INPUT | MUX_MODE0 ) /* mcbsp2_clkx, ADC_BCLK_1*/
			0x110 ( PIN_INPUT | MUX_MODE0 ) /* mcbsp2_dr, ADCDAT_R*/
		>;
	};
	
	/* Pins associated with the GPS */
	gps_pins: gps_pins {
		pinctrl-single,pins = <
			0x13E ( PIN_INPUT | MUX_MODE0 ) /* mcbsp3_dr, GPS_1PPS*/
			0x1AA ( PIN_INPUT | MUX_MODE4 ) /* gpt10_pwm_evt, GPS_1PPS*/
			0x1B6 ( PIN_OUTPUT | MUX_MODE2 ) /* uart4_tx, GPS_RXD*/
			0x1BC ( PIN_INPUT | MUX_MODE2 ) /* uart4_rx, GPS_TXD*/
			0x4A ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_34, GPS_PWRON*/
			0x4C ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_35, GPS_RST*/
		>;
	};
	
	/* User LEDs */
	user_leds: user_leds {
		pinctrl-single,pins = <
			0x5A ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_42, CPU_LED_1*/
			0x5C ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_43, CPU_LED_2*/
		>;
	};
	
	/* Serial console */
	uart3_pins: pinmux_uart3_pins {
		pinctrl-single,pins = <
			0x16A ( PIN_INPUT | MUX_MODE0 ) /* uart3_cts_rctx, CPU_UART3_CTS */
			0x16C ( PIN_OUTPUT | MUX_MODE0 ) /* uart3_rts_sd, CPU_UART3_RTS */
			0x16E ( PIN_INPUT | MUX_MODE0 ) /* uart3_rx_irrx, CPU_UART3_RX */
			0x170 ( PIN_OUTPUT | MUX_MODE0 ) /* uart3_tx_irtx, CPU_UART3_TX */
		>;
	};
	
	/* Pins associated with the cellular radio */
	cell_radio_default: pinmux_cell_radio {
		pinctrl-single,pins = <
			0x148 ( PIN_OUTPUT | MUX_MODE0 ) /* uart2_tx, GSM_RX1_CPU */
			0x14A ( PIN_INPUT | MUX_MODE0 ) /* uart2_rx, GSM_TX1_CPU */
			0x14C ( PIN_OUTPUT | MUX_MODE0 ) /* uart1_tx, GSM_RX0_CPU */
			0x152 ( PIN_INPUT | MUX_MODE0 ) /* uart1_rx, GSM_TX0_CPU */
			0x9E ( PIN_INPUT_PULLDOWN | MUX_MODE4 ) /* gpio_63, GSM_TXON*/
			0xA0 ( PIN_INPUT_PULLDOWN | MUX_MODE4 ) /* gpio_64, GSM_HWR*/
			0x82 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_53, GSM_WDIS*/
			0x84 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_54, GSM_3304_ON*/
			0x86 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_55, GSM_PWRON*/
			0x5AC ( PIN_INPUT_PULLDOWN | MUX_MODE5 ) /* mm_fsusb1_rxrcv, CPU_MM_FSUSB1_RXRCV*/
			0x5AE ( PIN_INPUT | MUX_MODE5 ) /* mm_fsusb1_txse0, CPU_MM_FSUSB1_TXSE0*/
			0x5B0 ( PIN_INPUT_PULLDOWN | MUX_MODE5 ) /* mm_fsusb1_txdat, CPU_MM_FSUSB1_TXDAT*/
			0x5BA ( PIN_INPUT | MUX_MODE5 ) /* mm_fsusb1_txen_n, CPU_MM_FSUSB1_TXEN_N*/
		>;
	};
	
	/* Ethernet */
	ethernet_pins: pinmux_ethernet_pins {
		pinctrl-single,pins = <
			0x4E ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_36, RELAY*/
			0x8C ( PIN_INPUT_PULLDOWN | MUX_MODE4 ) /* gpio_58, ETHERNET_IRQ_N*/
			0xA2 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_65, CPU_ETHERNET_RST_N*/
			0x1CE ( PIN_INPUT | MUX_MODE0 ) /* rmii_mdio_data, CPU_RMII_MDIO_DATA*/
			0x1D0 ( PIN_OUTPUT | MUX_MODE0 ) /* rmii_mdio_clk, CPU_RMII_MDIO_CLK*/
			0x1D2 ( PIN_INPUT | MUX_MODE0 ) /* rmii_rxd0, CPU_RMII_RXD0*/
			0x1D4 ( PIN_INPUT | MUX_MODE0 ) /* rmii_rxd1, CPU_RMII_RXD1*/
			0x1D6 ( PIN_INPUT | MUX_MODE0 ) /* rmii_crs_dv, CPU_RMII_CRS_DV*/
			0x1D8 ( PIN_OUTPUT | MUX_MODE0 ) /* rmii_rxer, CPU_RMII_RXER*/
			0x1DA ( PIN_OUTPUT | MUX_MODE0 ) /* rmii_txd0, CPU_RMII_TXD0*/
			0x1DC ( PIN_OUTPUT | MUX_MODE0 ) /* rmii_txd1, CPU_RMII_TXD1*/
			0x1DE ( PIN_OUTPUT | MUX_MODE0 ) /* rmii_txen, CPU_RMII_TXEN*/
			0x1E0 ( PIN_INPUT_PULLDOWN | MUX_MODE0 ) /* rmii_50mhz_clk, RMII_50MHZ_CLK*/
			0x1E2 ( PIN_OUTPUT_PULLDOWN | MUX_MODE0 ) /* usb0_drvvbus, CPU_USB0_DRVVBUS */
		>;
	};
	
	/* PMIC */
	pmic_pins: pinmux_pmic_pins {
		pinctrl-single,pins = <
			0x9D4 ( PIN_INPUT | MUX_MODE0 ) /* sys_32k, CPU_CLK32K*/
			0x9D6 ( PIN_INPUT | MUX_MODE4 ) /* gpio_1, SLEEP */
			0x18A ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* i2c1_scl, CPU_I2C1_SCL*/
			0x18C ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* i2c1_sda, CPU_I2C1_SDA*/
		>;
	};
		
	/* CPLD watchdog */
	cpld_pins: pinmux_cpld_pins {
		pinctrl-single,pins = <
			0xA6 ( PIN_INPUT_PULLDOWN | MUX_MODE4 ) /* gpio_67, CPLD_REV0*/
			0xA8 ( PIN_INPUT_PULLDOWN | MUX_MODE4 ) /* gpio_68, CPLD_REV1*/
			0xAA ( PIN_INPUT_PULLUP | MUX_MODE4 ) /* gpio_69, CPLD_REV2*/
			0xBE ( PIN_INPUT_PULLUP | MUX_MODE4 ) /* gpio_79, SHTDWN_FLAG*/
			0xB8 ( PIN_INPUT_PULLUP | MUX_MODE4 ) /* gpio_76, CPLD_HEARTBEAT*/
			0xA4 ( PIN_INPUT_PULLUP | MUX_MODE4 ) /* gpio_66, CPU_FORCE_SHTDWN*/
		>;
	};
	
	/* sdrc */
	sdrc_pins: pinmux_sdrc_pins {
		pinctrl-single,pins = <
			0x1EA ( PIN_INPUT_PULLDOWN | MUX_MODE0 ) /* sdrc_dqs0n, GND*/
			0x1EC ( PIN_INPUT_PULLDOWN | MUX_MODE0 ) /* sdrc_dqs1n, GND*/
			0x1EE ( PIN_INPUT_PULLDOWN | MUX_MODE0 ) /* sdrc_dqs2n, GND*/
			0x1F0 ( PIN_INPUT_PULLDOWN | MUX_MODE0 ) /* sdrc_dqs3n, GND*/
			0x1F2 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_strben_dly0, NC*/
			0x1F4 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_strben_dly1, NC*/
			0x236 ( PIN_OUTPUT | MUX_MODE0 ) /* sdrc_cke0, CPU_DSRC_SKE0*/
			0x00 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d0, CPU_SDRC_D0*/
			0x02 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d1, CPU_SDRC_D1*/
			0x04 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d2, CPU_SDRC_D2*/
			0x06 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d3, CPU_SDRC_D3*/
			0x08 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d4, CPU_SDRC_D4*/
			0x0A ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d5, CPU_SDRC_D5*/
			0x0C ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d6, CPU_SDRC_D6*/
			0x0E ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d7, CPU_SDRC_D7*/
			0x10 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d8, CPU_SDRC_D8*/
			0x12 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d9, CPU_SDRC_D9*/
			0x14 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d10, CPU_SDRC_D10*/
			0x16 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d11, CPU_SDRC_D11*/
			0x18 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d12, CPU_SDRC_D12*/
			0x1A ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d13, CPU_SDRC_D13*/
			0x1C ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d14, CPU_SDRC_D14*/
			0x1E ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d15, CPU_SDRC_D15*/
			0x20 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d16, CPU_SDRC_D16*/
			0x22 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d17, CPU_SDRC_D17*/
			0x24 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d18, CPU_SDRC_D18*/
			0x26 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d19, CPU_SDRC_D19*/
			0x28 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d20, CPU_SDRC_D20*/
			0x2A ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d21, CPU_SDRC_D21*/
			0x2C ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d22, CPU_SDRC_D22*/
			0x2E ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d23, CPU_SDRC_D23*/
			0x30 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d24, CPU_SDRC_D24*/
			0x32 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d25, CPU_SDRC_D25*/
			0x34 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d26, CPU_SDRC_D26*/
			0x36 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d27, CPU_SDRC_D27*/
			0x38 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d28, CPU_SDRC_D28*/
			0x3A ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d29, CPU_SDRC_D29*/
			0x3C ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d30, CPU_SDRC_D30*/
			0x3E ( PIN_INPUT | MUX_MODE0 ) /* sdrc_d31, CPU_SDRC_D31*/
			0x40 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_clk, CPU_SDRC_CLK*/
			0x42 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_dqs0p, CPU_SDRC_DQS0*/
			0x44 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_dqs1p, CPU_SDRC_DQS1*/
			0x46 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_dqs2p, CPU_SDRC_DQS2*/
			0x48 ( PIN_INPUT | MUX_MODE0 ) /* sdrc_dqs3p, CPU_SDRC_DQS3*/
		>;
	};
	
	/* hwmon */
	hwmon_pins: pinmux_hwmon {
		pinctrl-single,pins = <
			0x198 ( PIN_INPUT | MUX_MODE0 ) /* mcspi1_clk, CPU_MCSPI1_CLK*/
			0x19A ( PIN_INPUT | MUX_MODE0 ) /* mcspi1_simo, TP28_SPI1_SIMO*/
			0x19C ( PIN_INPUT | MUX_MODE0 ) /* mcspi1_somi, CPU_MCSPI1_SOMI*/
			0x19E ( PIN_INPUT_PULLDOWN | MUX_MODE0 ) /* mcspi1_cs0, CPU_MCSPI_CS0*/
			0x1C2 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_101, CPU_AMUX_INHB*/
			0x1C4 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_102, CPU_AMUX_A0*/
			0x1C6 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_103, CPU_AMUX_A1*/
			0x1C8 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_104, CPU_AMUX_A2*/
			0x1CA ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_105, CPU_AMUX_A3*/
			0xB0 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_72, CPU_AMUX_A4*/
		>;
	};
	
	/* Heaters */
	heaters: pinmux_heaters {
		pinctrl-single,pins = <
			0x50 ( PIN_INPUT_PULLDOWN | MUX_MODE4 ) /* gpio_37, HEAT_3304*/
			0xAC ( PIN_INPUT_PULLDOWN | MUX_MODE4 ) /* gpio_70, CPU_ADC_HEAT_LFT*/
			0xAE ( PIN_INPUT_PULLDOWN | MUX_MODE4 ) /* gpio_71, CPU_ADC_HEAT_RGT*/
		>;
	};
	
	/* Board rev fuses */
	board_rev_pins: pinmux_board_rev {
		pinctrl-single,pins = <
			0x120 ( PIN_INPUT_PULLDOWN | MUX_MODE4 ) /* gpio_126, BD_REV0*/
			0x122 ( PIN_INPUT_PULLDOWN | MUX_MODE4 ) /* gpio_127, BD_REV1*/
			0xD0 ( PIN_INPUT | MUX_MODE4 ) /* gpio_88, BD_REV2*/
			0xD2 ( PIN_INPUT | MUX_MODE4 ) /* gpio_89, BD_REV3*/
		>;
	};
	
	/* JTAG */
	jtag: pinmux_jtag {
		pinctrl-single,pins = <
			0x9EE ( PIN_INPUT | MUX_MODE0 ) /* jtag_tck, CPU_JTAG_TCK*/
			0x9F0 ( PIN_INPUT | MUX_MODE0 ) /* jtag_tms_tmsc, CPU_JTAG_TMS_TMSC*/
			0x9F2 ( PIN_INPUT | MUX_MODE0 ) /* jtag_tdi, CPU_JTAG_TDI*/
			0x9F4 ( PIN_INPUT | MUX_MODE0 ) /* jtag_emu0, CPU_JTAG_EMU0*/
			0x9F6 ( PIN_INPUT | MUX_MODE0 ) /* jtag_emu1, CPU_JTAG_EMU1*/
		>;
	};
	
	/* sysboot pins */
	sysboot: pinmux_sysboot {
		pinctrl-single,pins = <
			0x9DA ( PIN_INPUT | MUX_MODE0 ) /* sys_boot0, CPU_SYS_BOOT0*/
			0x9DC ( PIN_INPUT | MUX_MODE0 ) /* sys_boot1, CPU_SYS_BOOT1*/
			0x9DE ( PIN_INPUT | MUX_MODE0 ) /* sys_boot2, CPU_SYS_BOOT2*/
			0x9E0 ( PIN_INPUT | MUX_MODE0 ) /* sys_boot3, CPU_SYS_BOOT3 */
			0x9E2 ( PIN_INPUT | MUX_MODE0 ) /* sys_boot4, CPU_SYS_BOOT4 */
			0x9E4 ( PIN_INPUT | MUX_MODE0 ) /* sys_boot5, CPU_SYS_BOOT5 */
			0x9E6 ( PIN_INPUT | MUX_MODE0 ) /* sys_boot6, CPU_SYS_BOOT6 */
			0x1E8 ( PIN_INPUT | MUX_MODE0 ) /* sys_boot7, CPU_SYS_BOOT7 */
			0x1F6 ( PIN_INPUT | MUX_MODE0 ) /* sys_boot8, CPU_SYS_BOOT8 */
		>;
	};
	
	/* Grab bag */
	grabbag_pins: pinmux_grabbag {
		pinctrl-single,pins = <	
			0x52 ( PIN_INPUT_PULLUP | MUX_MODE4 ) /* gpio_38, 3810_POWER_GOOD*/
			0x54 ( PIN_INPUT_PULLDOWN | MUX_MODE4 ) /* gpio_39, 4356_LOW_VOLTAGE*/
			0x56 ( PIN_INPUT_PULLDOWN | MUX_MODE4 ) /* gpio_40, 4356_FAULT*/
			0x88 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_56, 1V8AR_PWRON*/
			0xD6 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_91, CPU_TP0*/
			0xD8 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_92, CPU_TP1*/
			0xDA ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_93, CPU_TP2*/
			0x124 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_128, CPU_PWRON_ADC*/
			0x9D8 ( PIN_INPUT | MUX_MODE0 ) /* sys_nreswarm, WARM_NRST */
			0x140 ( PIN_INPUT | MUX_MODE0 ) /* mcbsp3_clkx, ADC_BCLK1*/
			0x1B0 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* sys_nirq, NIRQ */
			0x1C0 ( INPUT_EN | PULL_UP | MUX_MODE4 ) /* gpio_100, 4356_GOOD*/
			0x4E ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_36, RELAY*/
			0x8C ( PIN_INPUT_PULLDOWN | MUX_MODE4 ) /* gpio_58, ETHERNET_IRQ_N*/
			0xB4 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_74, CPU_USB_SPEED*/
			0xB6 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_75, CPU_SOFTCON*/
			0xBC ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_78, CPU_TP3*/
			0xC0 ( PIN_INPUT_PULLUP | MUX_MODE4 ) /* gpio_80, SW0*/
			0xC2 ( PIN_INPUT_PULLUP | MUX_MODE4 ) /* gpio_81, SW1*/
			0xC8 ( PIN_OUTPUT | MUX_MODE4 ) /* gpio_84, CPU_CNTR_RST*/
		>;
	};
	
	/* Non-connected pins */
	not_connected: pinmux_nc_pins {
		pinctrl-single,pins = <
			0x58 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* safe_mode, NC*/
			0x8A ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC*/
			0xB2 ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC*/
			0xC4 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* gpio_82, NC*/
			0xC6 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* gpio_83, NC*/
			0xCA ( PIN_OUTPUT | MUX_MODE7 ) /* gpio_85, NC*/
			0xCC ( PIN_OUTPUT | MUX_MODE7 ) /* gpio_86, NC*/
			0xCE ( PIN_OUTPUT | MUX_MODE7 ) /* gpio_87, NC*/
			0xD4 ( PIN_OUTPUT | MUX_MODE7 ) /* gpio_90, NC*/
			0x112 ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC*/
			0x13C ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC*/
			0x144 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* safe_mode, NC */
			0x146 ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC */
			0x14E ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC */
			0x150 ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC */
			0x154 ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC*/
			0x156 ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC*/
			0x158 ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC*/
			0x15A ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC*/
			0x160 ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC*/
			0x166 ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC*/
			0x168 ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC*/
			0x196 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* safe_mode, NC*/
			0x1A0 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* safe_mode, NC*/
			0x1A2 ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC*/
			0x1A4 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* safe_mode, NC*/
			0x1A6 ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC*/
			0x1A8 ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC*/
			0x1AE ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* safe_mode, NC*/
			0x1B2 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* safe_mode, NC */
			0x1B4 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* safe_mode, NC*/
			0x1B8 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* safe_mode, NC*/
			0x1BA ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* safe_mode, NC*/
			0x1E4 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* safe_mode, NC*/
			0x1E6 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* safe_mode, NC*/
			0x5A8 ( PIN_INPUT | MUX_MODE4 ) /* gpio_12, NC*/
			0x5AA ( PIN_INPUT | MUX_MODE4 ) /* gpio_13, NC*/
			0x5B2 ( PIN_INPUT | MUX_MODE4 ) /* gpio_17, NC*/
			0x5B4 ( PIN_INPUT | MUX_MODE4 ) /* gpio_18, NC*/
			0x5B6 ( PIN_INPUT | MUX_MODE4 ) /* gpio_19, NC*/
			0x5B8 ( PIN_INPUT | MUX_MODE4 ) /* gpio_20, NC*/
			0x5BC ( PIN_INPUT | MUX_MODE4 ) /* gpio_22, NC*/
			0x5BE ( PIN_INPUT | MUX_MODE4 ) /* gpio_23, NC*/
			0x5C0 ( PIN_INPUT | MUX_MODE4 ) /* gpio_24, NC*/
			0x5C2 ( PIN_INPUT | MUX_MODE4 ) /* gpio_25, NC*/
			0x5C4 ( PIN_INPUT | MUX_MODE4 ) /* gpio_26, NC*/
			0x5C6 ( PIN_INPUT | MUX_MODE4 ) /* gpio_27, NC*/
			0x5C8 ( PIN_INPUT | MUX_MODE4 ) /* gpio_28, NC*/
			0x5CA ( PIN_INPUT | MUX_MODE4 ) /* gpio_29, NC*/
			0x9EA ( PIN_INPUT | MUX_MODE7 ) /* safe_mode, NC */
			/* We've no-stuffed the EEPROM, so nothing on the next three pins */
			0xBA ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* gpio_77, WP_EEPROM*/
			0x192 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* i2c3_scl, CPU_I2C3_SCL*/
			0x194 ( PIN_INPUT_PULLUP | MUX_MODE7 ) /* i2c3_sda, CPU_I2C3_SDA*/
		>;
	};
} ;

&gpmc {
	ranges = <0 0 0x00000000 0x10000000>;	/* CS0 0 ADDRESS SIZE */
	nand@0,0 {
		compatible = "ti,omap2-nand";
		reg = <0 0 0>;
		pinctrl-names = "default";
		pintctrl-0 = <&nand_pins>;
		interrupt-parent = <&gpmc>;
		nand-bus-width = <16>;
		#address-cells = <1>;
		#size-cells = <1>;
		linux,mtd-name= "micron,nand";
		gpmc,device-nand;
		gpmc,device-width = <2>;
		/*
		* We should be using BCH8, but in field upgrades would be impossible.
		* This is a compromise for backwards compatibility. We're not making
		* things any worse than they already are.
		*/
		ti,nand-ecc-opt = "sw"; /* Software 1 bit Hamming */
		/* L3 interconnect frequency = GPMC_FCLK = 166MHz => clock cycle = 6 ns*/
		/* gpmc,sync-clk-ps = <0>; */ /* N/A because we're async*/
		gpmc,cs-on-ns = <0>; /* 0 clock cycles */
		gpmc,cs-rd-off-ns = <120>; /* 20 clock cycles */
		gpmc,cs-wr-off-ns = <120>; /* 20 clock cycles */
		gpmc,adv-on-ns = <0>; /* 0 clock cycles */
		gpmc,adv-rd-off-ns = <120>; /* 20 clock cycles */
		gpmc,adv-wr-off-ns = <120>; /* 20 clock cycles */
		gpmc,we-on-ns = <6>; /* 1 clock cycle */
		gpmc,we-off-ns = <90>; /* 15 clock cycles */
		gpmc,oe-on-ns = <6>; /* 1 clock cycle */
		gpmc,oe-off-ns = <90>; /* 15 clock cycles */
		gpmc,page-burst-access-ns = <>; /* 1 clock cycle */
		gpmc,access-ns = <72>; /* 12 cycles */
		gpmc,rd-cycle-ns = <120>; /* 20 cycles */
		gpmc,wr-cycle-ns = <120>; /* 20 cycles */
		gpmc,bus-turnaround-ns = <0>; /* 0 cycles */
		gpmc,cycle2cycle-delay-ns = <60>; /* 10 cycles */
		gpmc,clk-activation-ns = <6>; /* 1 cycle */
		gpmc,cycle2cycle-samecsen; /* boolean */
		/* N/A */
		/* gpmc,wr-access-ns = <>;
		gpmc,wr-data-mux-bus-ns = <>; */

		partition@0 {
			label = "uboot-spl";
			reg = <0x0000000 0x00080000>;
			read-only;
		};

		partition@0x00080000 {
			label = "uboot";
			reg = <0x00080000 0x001c0000>;
			/* read-only; */
		};

		partition@0x00240000 {
			label = "uboot-params";
			reg = <0x00240000 0x00002000>;
			/* read-only; */
		};

		partition@0x00260000 {
			label = "uboot-params-recovery";
			reg = <0x00260000 0x00002000>;
			/* read-only; */
		};

		partition@0x00280000 {
			label = "linux-kernel";
			reg = <0x00280000 0x00500000>;
			/* read-only; */
		};

		partition@0x00780000 {
			label = "linux-kernel-recovery";
			reg = <0x00780000 0x00500000>;
			/* read-only; */
		};

		partition@0x00c80000 {
			label = "rootfs-recovery";
			reg = <0x00c80000 0x02000000>;
		};

		partition@0x02c80000 {
			label = "mfg";
			reg = <0x02c80000 0x00500000>;
		};

		partition@0x03180000 {
			label = "config";
			reg = <0x03180000 0x00a00000>;
		};

		partition@0x03b80000 {
			label = "cache";
			reg = <0x03b80000 0x01e00000>;
		};

		partition@0x05980000 {
			label = "rootfs";
			reg = <0x05980000 0x0a680000>;
		};
	};
};
